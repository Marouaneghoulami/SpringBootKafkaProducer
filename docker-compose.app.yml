services:
  app:
    build: .
    container_name: springboot-app
    environment:
      - SPRING_PROFILES_ACTIVE=local
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/userevents
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl", "http://localhost:8080/actuator/health"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - app-data:/app/data
    

  db:
    image: postgres:bullseye
    container_name: postgres-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=userevents
    command: ["postgres", "-c", "wal_level=logical", "-c", "max_replication_slots=10", "-c", "max_wal_senders=10"]
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./init-pg-dbz-replica.sql:/docker-entrypoint-initdb.d/init.sql:ro

networks:
  app-network:
    name: data-eng-app-streaming-network
    driver: bridge

volumes:
  app-data:
  db-data:
